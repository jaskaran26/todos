{"version":3,"sources":["components/Navbar.js","contexts/TodoContext.js","components/TodoItem.js","components/TodoList.js","components/TodoForm.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","Navbar","classes","className","AppBar","position","Toolbar","Typography","variant","TodoContext","createContext","TodoContextProvider","props","initialTodos","JSON","parse","localStorage","getItem","useState","todos","setTodo","Provider","value","addTodo","children","TodoItem","useContext","ListItem","button","ListItemIcon","ListItemText","primary","todoitem","item","ListItemSecondaryAction","IconButton","edge","aria-label","onClick","e","deleteID","newArr","filter","todo","id","setItem","stringify","handleDelete","Divider","TodoList","listSubHeader","ListSubheader","component","List","subheader","map","key","TodoForm","open","setOpen","fieldError","setFieldError","handleClose","Button","color","Dialog","onClose","aria-labelledby","fullWidth","DialogTitle","DialogContent","Alert","style","marginBottom","severity","TextField","label","type","onChange","target","DialogActions","Math","floor","random","saveTodos","App","Container","maxWidth","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.70159064.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {AppBar,Toolbar} from '@material-ui/core';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nfunction Navbar() {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            To-do List\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { createContext, useState } from 'react';\r\n\r\nexport const TodoContext = createContext();\r\n\r\nconst TodoContextProvider = (props) => {\r\n    let initialTodos = JSON.parse(localStorage.getItem(\"todos\") || \"[]\");\r\n    const [todos, setTodo] = useState(initialTodos);\r\n    return (\r\n        <TodoContext.Provider value={{ todos: todos, addTodo: setTodo }}>\r\n            {props.children}\r\n        </TodoContext.Provider>\r\n    );\r\n}\r\n\r\nexport default TodoContextProvider\r\n","import React, {useContext} from 'react';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport StarBorder from '@material-ui/icons/StarBorder';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { TodoContext } from '../contexts/TodoContext';\r\n\r\nconst TodoItem = (props) => {\r\n    const {todos, addTodo} = useContext(TodoContext);\r\n    const handleDelete = (deleteID) => {\r\n        let newArr = todos.filter(function(todo){\r\n            return deleteID != todo.id;\r\n        });\r\n        addTodo(newArr);\r\n        localStorage.setItem('todos', JSON.stringify(newArr));\r\n    }\r\n    return (\r\n        <>\r\n            <ListItem button>\r\n                <ListItemIcon>\r\n                    <StarBorder />\r\n                </ListItemIcon>\r\n                <ListItemText primary={props.todoitem.item} />\r\n                <ListItemSecondaryAction>\r\n                    <IconButton edge=\"end\" aria-label=\"delete\" onClick={(e) => handleDelete(props.todoitem.id)}>\r\n                        <DeleteIcon />\r\n                    </IconButton>\r\n                </ListItemSecondaryAction>\r\n            </ListItem>\r\n            <Divider />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TodoItem\r\n","import React, { useContext } from 'react';\r\nimport List from '@material-ui/core/List';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport TodoItem from './TodoItem';\r\nimport { TodoContext } from '../contexts/TodoContext';\r\n\r\nconst TodoList = () => {\r\n    const { todos } = useContext(TodoContext);\r\n    const listSubHeader = <ListSubheader component=\"div\" id=\"nested-list-subheader\">TODO List</ListSubheader>;\r\n    return (\r\n        <div>\r\n            <List component=\"nav\" aria-label=\"Todo list\" subheader={listSubHeader}>\r\n                {todos.map(todo => {\r\n                    return <TodoItem key={todo.id} todoitem={todo} />;\r\n                })}\r\n            </List>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoList\r\n","import React, { useState, useContext } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { TodoContext } from '../contexts/TodoContext';\r\nimport Alert from '@material-ui/lab/Alert'; \r\n\r\n\r\nconst TodoForm = (props) => {\r\n    const {todos, addTodo} = useContext(TodoContext);\r\n    const [open, setOpen] = useState(false);\r\n    const [todo,setTodo] = useState('');\r\n    const [fieldError,setFieldError] = useState(false);\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const changeHandler = (e) => {\r\n        setTodo(e.target.value);\r\n    }\r\n    const submitHandler = () => {\r\n        if(todo != ''){\r\n            addTodo(\r\n                [...todos, {id: Math.floor((Math.random() * 999) + 1), item: todo}]\r\n            );\r\n            const saveTodos = [...todos, {id: Math.floor((Math.random() * 999) + 1), item: todo}];\r\n            localStorage.setItem('todos', JSON.stringify(saveTodos));\r\n            setTodo('');\r\n            setFieldError(false);\r\n        }else{\r\n            setFieldError(true);\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={handleClickOpen}>Add new</Button>\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\" fullWidth>\r\n                <DialogTitle>ADD TODO</DialogTitle>\r\n                <DialogContent>\r\n                    {fieldError ? <Alert style={{marginBottom: '10px'}} severity=\"error\">Please add todo name</Alert> : null}\r\n                    <TextField label=\"Name\" type=\"text\" variant=\"outlined\" value={todo} onChange={changeHandler} fullWidth />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\">Cancel</Button>\r\n                    <Button onClick={submitHandler} color=\"primary\">Add</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoForm\r\n","import React from 'react';\nimport Container from '@material-ui/core/Container';\nimport Navbar from './components/Navbar';\nimport TodoList from './components/TodoList';\nimport TodoForm from './components/TodoForm';\nimport TodoContextProvider from './contexts/TodoContext';\n\nfunction App() {\n  return (\n    <TodoContextProvider>\n      <Navbar />\n      <Container maxWidth=\"sm\">\n        <div className=\"appContainer\">\n          <TodoForm />\n          <TodoList />\n        </div>\n      </Container>\n    </TodoContextProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}